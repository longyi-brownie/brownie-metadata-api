name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_VERSION: "14"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_brownie_metadata
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Generate test certificates
      run: |
        mkdir -p test-certs
        # Generate self-signed certificates for testing
        openssl req -x509 -newkey rsa:4096 -keyout test-certs/client.key -out test-certs/client.crt -days 365 -nodes -subj "/CN=test-client"
        openssl req -x509 -newkey rsa:4096 -keyout test-certs/ca.crt -out test-certs/ca.key -days 365 -nodes -subj "/CN=test-ca"
        chmod 600 test-certs/client.key
    
    - name: Set up test database
      run: |
        # Clean up any existing test database and user
        PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS test_brownie_metadata;" || true
        PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP USER IF EXISTS test_user;" || true
        
        # Create test user and database
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE USER test_user WITH PASSWORD 'test_password';"
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE test_brownie_metadata OWNER test_user;"
        PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE test_brownie_metadata TO test_user;"
    
    - name: Run database migrations
      env:
        METADATA_POSTGRES_DSN: "postgresql://test_user:test_password@localhost:5432/test_brownie_metadata?sslmode=disable"
      run: |
        # Install the database package for migrations
        uv add brownie-metadata-db==0.1.0
        # Run migrations (if available)
        # alembic upgrade head
    
    - name: Run linting
      run: |
        uv run ruff check .
        uv run ruff format --check .
        uv run mypy app/
    
    - name: Run security checks
      run: |
        uv run bandit -r app/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true
    
    - name: Run unit tests
      env:
        METADATA_POSTGRES_DSN: "postgresql://test_user:test_password@localhost:5432/test_brownie_metadata?sslmode=disable"
        METADATA_JWT_SECRET: "test-jwt-secret-key-for-testing-only"
        METADATA_DEBUG: "true"
      run: |
        uv run pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Run integration tests
      env:
        METADATA_POSTGRES_DSN: "postgresql://test_user:test_password@localhost:5432/test_brownie_metadata?sslmode=disable"
        METADATA_JWT_SECRET: "test-jwt-secret-key-for-testing-only"
        METADATA_DEBUG: "true"
      run: |
        uv run pytest tests/integration/ -v
    
    - name: Run comprehensive CRUD tests
      env:
        METADATA_POSTGRES_DSN: "postgresql://test_user:test_password@localhost:5432/test_brownie_metadata?sslmode=disable"
        METADATA_JWT_SECRET: "test-jwt-secret-key-for-testing-only"
        METADATA_DEBUG: "true"
      run: |
        uv run pytest tests/test_auth_comprehensive.py tests/test_user_crud_comprehensive.py -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  certificate-test:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_brownie_metadata
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Generate test certificates
      run: |
        mkdir -p test-certs
        # Generate self-signed certificates for testing
        openssl req -x509 -newkey rsa:4096 -keyout test-certs/client.key -out test-certs/client.crt -days 365 -nodes -subj "/CN=test-client"
        openssl req -x509 -newkey rsa:4096 -keyout test-certs/ca.crt -out test-certs/ca.key -days 365 -nodes -subj "/CN=test-ca"
        chmod 600 test-certs/client.key
    
    - name: Set up test database with SSL
      run: |
        # Clean up any existing test database and user
        PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS test_brownie_metadata;" || true
        PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP USER IF EXISTS test_user;" || true
        
        # Create test user and database
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE USER test_user WITH PASSWORD 'test_password';"
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE test_brownie_metadata OWNER test_user;"
        PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE test_brownie_metadata TO test_user;"
    
    - name: Test certificate authentication
      env:
        METADATA_POSTGRES_DSN: "postgresql://test_user:test_password@localhost:5432/test_brownie_metadata?sslmode=require&sslcert=test-certs/client.crt&sslkey=test-certs/client.key&sslrootcert=test-certs/ca.crt"
        METADATA_JWT_SECRET: "test-jwt-secret-key-for-testing-only"
        METADATA_DEBUG: "true"
      run: |
        # Test database connection with certificates
        uv run python -c "
        from app.db import get_db
        db = next(get_db())
        result = db.execute('SELECT 1').fetchone()
        print('Certificate authentication successful:', result)
        db.close()
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: [test, certificate-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/brownie-metadata-api:latest
          ${{ secrets.DOCKER_USERNAME }}/brownie-metadata-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke test commands here
        # Example: curl -f https://staging-api.yourcompany.com/health

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
    
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add production health check commands here
        # Example: curl -f https://api.yourcompany.com/health

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance test commands here
        # Example: k6 run performance-tests/load-test.js
