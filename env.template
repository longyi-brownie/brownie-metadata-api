# =============================================================================
# BROWNIE METADATA API - ENVIRONMENT TEMPLATE
# =============================================================================
# 
# ⚠️  SECURITY WARNING: This is a template file!
# 
# 1. Copy this file to .env: cp env.template .env
# 2. Update all placeholder values with real secrets
# 3. NEVER commit .env to version control
# 4. Use proper secrets management in production
#
# =============================================================================

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database
# For certificate auth: postgresql://username@host:port/database?sslmode=require&sslcert=...
METADATA_POSTGRES_DSN=postgresql://brownie:brownie@localhost:5432/brownie_metadata

# =============================================================================
# JWT AUTHENTICATION
# =============================================================================
# Generate a strong secret: openssl rand -base64 32
# NEVER use the default value in production!
METADATA_JWT_SECRET=CHANGE_THIS_TO_A_STRONG_SECRET_AT_LEAST_32_CHARS

# JWT token expiration in minutes
METADATA_JWT_EXPIRES_MINUTES=60

# JWT signing algorithm
METADATA_JWT_ALGORITHM=HS256

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# Debug mode (set to false in production)
METADATA_DEBUG=false

# Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
METADATA_LOG_LEVEL=INFO

# Server host and port
METADATA_HOST=0.0.0.0
METADATA_PORT=8080

# CORS allowed origins (JSON array)
METADATA_CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]

# =============================================================================
# OKTA OIDC CONFIGURATION
# =============================================================================
# Okta domain (e.g., yourcompany.okta.com)
METADATA_OKTA_DOMAIN=

# Okta application client ID
METADATA_OKTA_CLIENT_ID=

# Okta application client secret
METADATA_OKTA_CLIENT_SECRET=

# =============================================================================
# VAULT PKI CONFIGURATION (PRODUCTION)
# =============================================================================
# Enable Vault for certificate management
VAULT_ENABLED=false

# Vault server URL
VAULT_URL=https://vault.example.com

# Vault authentication token
VAULT_TOKEN=

# Vault path for certificates
VAULT_CERT_PATH=secret/brownie-metadata/certs

# =============================================================================
# CERTIFICATE MANAGEMENT (DEVELOPMENT)
# =============================================================================
# Local directory for development certificates
LOCAL_CERT_DIR=dev-certs

# =============================================================================
# mTLS CONFIGURATION
# =============================================================================
# Enable mutual TLS for production
METADATA_MTLS_ENABLED=false

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 
# 1. JWT_SECRET: Must be at least 32 characters, use: openssl rand -base64 32
# 2. Database passwords: Use strong passwords, consider certificate auth
# 3. Vault tokens: Rotate regularly, use short-lived tokens
# 4. CORS origins: Restrict to your actual domains in production
# 5. Debug mode: Always false in production
# 6. Log levels: Use INFO or WARNING in production
#
# =============================================================================
